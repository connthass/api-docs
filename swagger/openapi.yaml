openapi: 3.0.0
info:
  version: 1.0.0
  title: Connthass API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: event
    description: Connthass Event
  - name: category
    description: Connthass Category
  - name: group
    description: Connthass Category
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
servers:
  - url: http://127.0.0.1:8083
  - url: https://127.0.0.1:8083
paths:
  /events:
    get:
      tags:
        - event
      summary: イベントを検索する
      description: 記事の一覧を作成日時の降順で返します。
      operationId: searchEvens
      parameters:
        - name: fields
          in: query
          description: 検索結果で取得するフィールドをカンマ区切りで指定
          required: false
          schema:
            type: string
        - name: query
          in: query
          description: 検索クエリ
          required: false
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: ページ番号 (1から100まで)
          required: false
          schema:
            type: integer
            format: int64
        - name: per_page
          in: query
          description: 1ページあたりに含まれる要素数 (1から100まで)
          required: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          $ref: "#/components/responses/Events"
  /event:
    post:
      tags:
        - event
      summary: イベントを追加する
      description: ""
      operationId: addEvent
      requestBody:
        $ref: "#/components/requestBodies/Event"
      responses:
        201:
          $ref: "#/components/responses/Event"
  "/event/{eventId}":
    get:
      tags:
        - event
      summary: IDからイベントを取得する
      description: Returns a single Event
      operationId: getEventById
      parameters:
        - name: eventId
          in: path
          description: ID of event to return
          required: true
          schema:
            type: integer
            format: int64
        - name: fields
          in: query
          description: 検索結果で取得するフィールドをカンマ区切りで指定
          required: false
          schema:
            type: string
      responses:
        200:
          $ref: "#/components/responses/Event"
      security:
        - api_key: []
    patch:
      tags:
        - event
      summary: 特定のイベントを更新する
      description: ""
      operationId: updateEvent
      parameters:
        - name: eventId
          in: path
          description: ID of event that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  description: Updated title of the event
                  type: string
                description:
                  description: Updated description of the event
                  type: string
                capacity:
                  description: Updated capacity of the event
                  type: string
                image_url:
                  type: string
                  description: イベントの画像
                qr_code_url:
                  type: string
                  description: 投げ銭用のQRコード
                hold_start_date:
                  type: string
                  format: date-time
                hold_end_date:
                  type: string
                  format: date-time
                recruit_start_date:
                  type: string
                  format: date-time
                recruit_end_date:
                  type: string
                  format: date-time
                  
      responses:
        200:
          $ref: "#/components/responses/Event"
          
    delete:
      tags:
        - event
      summary: 特定のイベントを削除する
      description: ""
      operationId: deleteEvent
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: eventId
          in: path
          description: Event id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: No Content
            
  /event/{eventId}/entry:
    post:
      tags:
        - event
      summary: 参加者を追加する
      description: entry_eventsの関連テーブルにレコードを追加する
      operationId: entryEvent
      parameters:
        - name: eventId
          in: path
          description: ID of event that needs added
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                entries:
                  type: array
                  items:
                    $ref: "#/components/schemas/Entry"
      responses:
        200:
          $ref: "#/components/responses/Entry"
          
  /category:
    post:
      tags:
        - category
      summary: Create category
      description: This can only be done by the logged in user.
      operationId: createCategory
      requestBody:
        $ref: "#/components/requestBodies/Category"
      responses:
        200:
          $ref: "#/components/responses/Category"
          
  /category{categoryId}:
    get:
      tags:
      - "category"
      summary: IDからカテゴリを取得
      description: カテゴリを一つ返します
      operationId: "getCategoryById"
      parameters:
        - name: categoryId
          in: path
          description: "ID of category to return"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          $ref: "#/components/responses/Category"
      security:
      - api_key: []
  /group:
    post:
      tags:
        - group
      summary: Create group
      description: This can only be done by the logged in user.
      operationId: createGroup
      requestBody:
        $ref: "#/components/requestBodies/Group"
      responses:
        200:
          $ref: "#/components/responses/Group"
  /group/{groupId}:
    get:
      tags:
      - group
      summary: "Find group by ID"
      description: "Returns a single group"
      operationId: "getGroupById"
      parameters:
        - name: groupId
          in: path
          description: "ID of group to return"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          $ref: "#/components/responses/Group"
      security:
      - api_key: []
  /group/{groupId}/member:
    post:
      tags:
        - group
      summary: メンバーを追加する
      description: memberテーブルにレコードを追加する
      operationId: joinGroup
      parameters:
        - name: groupId
          in: path
          description: ID of event that needs added
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        200:
          $ref: "#/components/responses/User"
  /group/{groupId}/member/{name}:
    delete:
      tags:
        - group
      summary: メンバーを削除する
      description: ""
      operationId: deleteMember
      parameters:
        - name: groupId
          in: path
          description: member id to delete
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: path
          description: ユーザ名
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        200:
          $ref: "#/components/responses/User"

  "/user/{name}":
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: name
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: "#/components/responses/User"
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: name
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        $ref: "#/components/requestBodies/User"
      responses:
        204:
          description: No content
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: name
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
  /user/{name}/new_events:
    get:
      tags:
        - user
      summary: Get new events for user by name
      description: ""
      operationId: getNewEvents
      parameters:
        - name: name
          in: path
          description: name of user
          required: true
          schema:
            type: string
            format: int64
      responses:
        200:
          $ref: "#/components/responses/Events"
components:
  requestBodies:
    Event:
      description: 追加するためにはEventオブジェクトが必要です
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Event"
    Category:
      description: 追加するためにはCategoryオブジェクトが必要です
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Category"
    User:
      description: 追加するためにはUserオブジェクトが必要です
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Event"
    Group:
      description: 追加するためにはGroupオブジェクトが必要です
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Group"
  responses:
    Event:
      description: 追加または更新されたEventオブジェクトを返します
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Event"
    Events:
      description: OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Event"
    Category:
      description: 追加または更新されたCategoryオブジェクトを返します
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Category"
    User:
      description: 追加または更新されたUserオブジェクトを返します
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
            
    Group:
      description: 追加または更新されたGroupオブジェクトを返します
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Group"
    Entry:
      description: 参加したUserオブジェクトの配列を返します
      content:
        application/json:
          schema:
            type: object
            properties:
              entries:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    Entry:
      type: object
      properties:
        name:
          type: string
        role:
          type: string
    Group:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        domain:
          type: string
        color_code:
          type: string
        image_path:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Event:
      type: object
      required:
        - title
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: 勉強会
        description:
          type: string
          example: エンジニア集まれ
        capacity:
          type: integer
          format: int64
          example: 10
        color_code:
          type: string
          example: #f0f8ff
        image_url:
          type: string
          example: http://localhost:8000
        qr_code_url:
          type: string
          example: http://localhost:8000
        hold_start_date:
          type: string
          format: date-time
        hold_end_date:
          type: string
          format: date-time
        recruit_start_date:
          type: string
          format: date-time
        recruit_end_date:
          type: string
          format: date-time
        organizer:
          type: array
          items:
            $ref: '#/components/schemas/User'
        entries:
          type: array
          items:
            $ref: '#/components/schemas/User'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        group:
          $ref: '#/components/schemas/Group'
        venue:
          $ref: '#/components/schemas/Venue'
    Venue:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string


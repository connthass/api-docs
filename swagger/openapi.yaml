openapi: 3.0.0
info:
  version: 1.0.0
  title: Connthass API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
tags:
  - name: event
    description: Connthass Event
  - name: category
    description: Connthass Category
  - name: group
    description: Connthass Category
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
servers:
  - url: http://127.0.0.1:8083
  - url: https://127.0.0.1:8083
paths:
  /events:
    get:
      tags:
        - event
      summary: イベントを検索する
      description: 記事の一覧を作成日時の降順で返します。
      operationId: searchEvens
      parameters:
        - name: page
          in: query
          description: ページ番号 (1から100まで)
          required: false
          schema:
            type: integer
            format: int64
        - name: per_page
          in: query
          description: 1ページあたりに含まれる要素数 (1から100まで)
          required: false
          schema:
            type: integer
            format: int64
        - name: query
          in: query
          description: 検索クエリ
          required: false
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
            application/xml:
              schema:
                $ref: "#/components/schemas/Event"
  /event:
    post:
      tags:
        - event
      summary: イベントを追加する
      description: ""
      operationId: addEvent
      requestBody:
        $ref: "#/components/requestBodies/Event"
      responses:
        '201':
          description: CREATED
      security:
        - event_auth:
            - write:events
            - read:events
    put:
      tags:
        - event
      summary: 作成済みのイベントを更新する
      description: ""
      operationId: updateEvent
      requestBody:
        $ref: "#/components/requestBodies/Event"
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Event not found
        "405":
          description: Validation exception
      security:
        - event_auth:
            - write:events
            - read:events
  "/event/{eventId}":
    get:
      tags:
        - event
      summary: IDからイベントを取得する
      description: Returns a single Event
      operationId: getEventById
      parameters:
        - name: eventId
          in: path
          description: ID of event to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          description: Invalid ID supplied
        "404":
          description: Event not found
      security:
        - api_key: []
    post:
      tags:
        - event
      summary: 特定のイベントを更新する
      description: ""
      operationId: updateEventWithForm
      parameters:
        - name: eventId
          in: path
          description: ID of event that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                title:
                  description: Updated title of the event
                  type: string
                description:
                  description: Updated description of the event
                  type: string
                capacity:
                  description: Updated capacity of the event
                  type: string
      responses:
        "405":
          description: Invalid input
      security:
        - event_auth:
            - write:events
            - read:events
    delete:
      tags:
        - event
      summary: 特定のイベントを削除する
      description: ""
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: eventId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - event_auth:
            - write:events
            - read:events
  /category:
    post:
      tags:
        - category
      summary: Create category
      description: This can only be done by the logged in user.
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
        description: Created category object
        required: true
      responses:
        default:
          description: successful operation
  /category{categoryId}:
    get:
      tags:
      - "category"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getCategoryById"
      parameters:
        - name: categoryId
          in: path
          description: "ID of category to return"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
  /group:
    post:
      tags:
        - group
      summary: Create group
      description: This can only be done by the logged in user.
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
      responses:
        default:
          description: successful operation
  /group{groupId}:
    get:
      tags:
      - "group"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getGroupById"
      parameters:
        - name: groupId
          in: path
          description: "ID of group to return"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
        "400":
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
      responses:
        '201':
          description: CREATED
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithListInput
      requestBody:
        $ref: "#/components/requestBodies/UserArray"
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  "/user/{username}":
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      description: List of user object
      required: true
    Event:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Event"
      description: 追加するためにはEventオブジェクトが必要です
      required: true
  securitySchemes:
    event_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:events: アカウントのイベントを修正する
            read:events: アカウントのイベントの読み込み
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:

    Group:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        domain:
          type: string
        color_code:
          type: string
        image_path:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Event:
      type: object
      required:
        - title
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          example: 勉強会
        description:
          type: string
          example: エンジニア集まれ
        capacity:
          type: integer
          format: int64
          example: 10
        color_code:
          type: string
          example: #f0f8ff
        image_url:
          type: string
          example: http://localhost:8000
        qr_code_url:
          type: string
          example: http://localhost:8000
        hold_start_date:
          type: string
          format: date-time
        hold_end_date:
          type: string
          format: date-time
        recruit_start_date:
          type: string
          format: date-time
        recruit_end_date:
          type: string
          format: date-time
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        group:
          $ref: '#/components/schemas/Group'
        venue:
          $ref: '#/components/schemas/Venue'
    Venue:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
            example:
              - エラーメッセージ1
              - エラーメッセージ2
              - エラーメッセージ3
              - エラーメッセージ4
 
